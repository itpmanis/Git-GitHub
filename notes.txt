
⭐️ Git:
        Git is a version control system for tracking changes in computer files and coordinating work on those files among multiple people.

⭐️ Git Basic
⭐️ 1. Install Git:
        Download and install Git from https://git-scm.com/

⭐️ 2. Configure Git:
        - git config --global user.name "Your Name"
        - git config --global user.email "Your Email"

⭐️ 3. Initialize a Git Repository:
        Go to your project's directory and run:
        - git init

⭐️ 4. Add Files 
        Add files to the staging area before committing:
        - git add <file-name>
        - git add . (to add all files)

⭐️ 5. Commit Changes
        Commit your changes with a message:
        - git commit -m "Commit message"

⭐️ 6. Check Status:
        View the status of your repository:
        - git status

⭐️ 7. View Commits History:
        View the history of your commits:
        - git log

⭐️ 8. Ignoring Files:
        Create a file named .gitignore and add the files you want to ignore:
        - touch .gitignore
        - inside .gitignore file add the files you want to ignore with their extensions
        - eg: *.txt (to ignore all txt files), .DS_Store (to ignore .DS_Store file)

⭐️ 9. Viewing Changes:
        View the changes between the working directory and the staging area:
        - git diff

-----------------------------------------------------------
⭐️ GitHub:
        GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.
        We can say giant online storage for projects.


⭐️ GitHub Basic

⭐️ 1. Create a GitHub Account:
        Go to https://github.com/ and sign up.

⭐️ 2. Create a Repository:
        Click on "+" and choose "New repository" on GitHub. 
        Give a name to your repository and click on "Create repository".

⭐️ 3. Connect Local Git Repository to GitHub:
        Copy the URL of your repository from GitHub.
        Go to your project's directory and run:
        - git remote add origin <repository-url>  (to connect local repository to remote repository)
        
⭐️ 4. Push Changes to GitHub:
        Push your local changes to GitHub:
        - git push -u origin master

⭐️ 5. Clone a Repository:
        Clone a repository from GitHub to your local machine:
        - git clone <repository-url>

⭐️ 6. Pulling Changes from GitHub:
        Pull changes from GitHub to your local machine:
        - git pull origin master

-----------------------------------------------------------

⭐️ Branching in Git:
        Branching is the way to work on different versions of a repository at one time.
        By default, a repository has one branch named master which is considered to be the definitive branch.
        We use branches to experiment and make edits before committing them to master.
        
        1. Create a Branch:
        - git branch new-branch

        2. Switch to a Branch:
        - git checkout new-branch

        3. Merge a Branch:
        - git checkout branch-to-merge-into

        4. Delete a Branch:
        - git branch -d branch-to-delete

-----------------------------------------------------------

⭐️ Pull Request:
        Pull requests let you tell others about changes you've pushed to a branch in a repository on GitHub.
        Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch.

        1. Create a Pull Request:
        - git push origin new-branch

        2. Merge a Pull Request:
        - git checkout master
        - git merge new-branch
        - git push origin master





__________
 ** basic command-line interface (CLI) commands **

macOS Terminal Commands
ls: Lists the files and directories in the current directory.
cd: Changes the current directory.
mkdir: Creates a new directory.
rmdir: Removes an empty directory.
rm: Deletes files or directories.
cp: Copies files or directories.
mv: Moves or renames files or directories.
cat: Concatenates and displays the contents of files.
echo: Displays messages or sets environment variables.
clear: Clears the terminal screen.
exit: Exits the shell.
ifconfig: Configures or displays network interface parameters.
ping: Tests connectivity to another network host.
ps: Displays information about active processes.
kill: Terminates processes by process ID.
chmod: Changes file permissions.
chown: Changes file ownership.
grep: Searches for patterns in files.
find: Searches for files in a directory hierarchy.
tar: Archives files.
wget: Retrieves files from the web.
curl: Transfers data from or to a server.
ssh: Connects to a remote machine via SSH.
scp: Securely copies files between hosts.
nano: Edits files using the Nano text editor.
vim: Edits files using the Vim text editor.
open: Opens files or directories in their default application.
top: Displays real-time system statistics.
du: Estimates file and directory space usage.
df: Reports file system disk space usage.
diskutil: Manages disk partitions and formats.
say: Converts text to speech.
defaults: Accesses macOS user defaults.
spctl: Manages the security assessment policy subsystem.

____________________
** Notes ** 
- Git is just a software,
- Github is a service provider.
- Repo (Repository): a folder which contain lots of project files and folders.
- git history: all the changes that have been made to the project.
- git status: to check the status of the project.
- git init: (one time per project) to initialize the git repository.
- .git: hidden folder which contain all the git history.
- staging area: a place where we can add files before committing.
- git log: to see the history of the projec  q
- git ignore: to ignore the files that we don't want to track.